// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way (in=load, sel=address[0..2], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7); // demultiplexing the load to 8 paths, so that i can handle 8 of the RAM8, (specifying which RAM8 of the 8 RAM8 in the RAM64 is the wanted one using the first three bits of the address)

    RAM8(in=in, load=load0, address=address[3..5], out=regs8);
    RAM8(in=in, load=load1, address=address[3..5], out=regs16);
    RAM8(in=in, load=load2, address=address[3..5], out=regs24);
    RAM8(in=in, load=load3, address=address[3..5], out=regs32);
    RAM8(in=in, load=load4, address=address[3..5], out=regs40);
    RAM8(in=in, load=load5, address=address[3..5], out=regs48);
    RAM8(in=in, load=load6, address=address[3..5], out=regs56);
    RAM8(in=in, load=load7, address=address[3..5], out=regs64);

    Mux8Way16 (a=regs8, b=regs16, c=regs24, d=regs32, e=regs40, f=regs48, g=regs56, h=regs64, sel=address[0..2], out=out); // multiplexing the output of each one of the RAM8 to get the wanted register, (specifiying which register of the 8 registers chosen from the 8 RAM8 is the wanted one)
}
